import flixel.FlxG;
import flixel.FlxSprite;
import funkin.Paths;
import funkin.play.stage.Stage;
import funkin.play.PlayState;
import flixel.text.FlxText;
import funkin.audio.FunkinSound;
import funkin.Conductor;

import funkin.modding.module.Module;
import funkin.FunkinMemory;

class StaticTexthandler extends Module
{
    public var allowWorking:Bool = false;
	function new()
	{
		super("tricky.StaticTexthandler");	
		FunkinMemory.permanentCacheTexture(Paths.image("bgs/TrickyStatic", "shared"));
	}

	var trickySongsArray = ["improbable-outset", "madness", "hellclown", "expurgation"];
    var lineChances = [2, 20, 45, 60];

    //only in madness
	var madnessTrickyLinesMiss:Array<String> = ["TERRIBLE", "WASTE", "MISS CALCULTED", "PREDICTED", "FAILURE", "DISGUSTING", "ABHORRENT", "FORESEEN", "CONTEMPTIBLE", "PROGNOSTICATE", "DISPICABLE", "REPREHENSIBLE"];

	var spookySteps:Int = 0;
	var spookyRendered:Bool = false;
	var spookyText:FlxText;
	var resetSpookyText:Bool = true;
    var staticSpr:FlxSprite;

    function onStateChangeEnd(event:StateChangeScriptEvent)
	{
		allowWorking = false;
		if (Std.isOfType(event.targetState, PlayState))
			loadTrickyStuff();

		super.onStateChangeEnd(event);
	}

	function onSubStateOpenEnd(event)
	{
		if (Std.isOfType(event.targetState, PlayState))
			loadTrickyStuff();

		super.onSubStateOpenEnd(event);
	}

    function loadTrickyStuff()
    {
        allowWorking = true;
		spookyRendered = false;
        
		spookyText = null;
		
		if (!trickySongsArray.contains(PlayState.instance.currentChart.song.id))
		{
			allowWorking = false;
			return;
		}

		staticSpr = new FlxSprite().loadGraphic(Paths.image('bgs/TrickyStatic'), true, 320, 180);
		staticSpr.antialiasing = true;
		staticSpr.animation.add('static', [0, 1, 2], 24, true);
		staticSpr.animation.play('static');
		staticSpr.scale.set(8, 8);
		staticSpr.updateHitbox();
		staticSpr.screenCenter();
		staticSpr.alpha = 0; //0;
        staticSpr.cameras = [PlayState.instance.camHUD, PlayState.instance.camCutscene];
		PlayState.instance.insert(0, staticSpr);
    }

	function onNoteHit(event:HitNoteScriptEvent)
	{
		if (PlayState.instance == null || !allowWorking)
			return;

        if (event.judgement == "perfect")
        {
			if (FlxG.random.bool(lineChances[trickySongsArray.indexOf(PlayState.instance.currentChart.song.id)]) && !spookyRendered)
                createSpookyText(getLines());
    	}
	}

    function onNoteMiss(event)
    {
    	super.onNoteMiss(event);
		
		if (PlayState.instance == null || !allowWorking)
			return;

		if (FlxG.random.bool(PlayState.instance.currentChart.song.id == "madness" ? 10 : 0) && !spookyRendered)
			createSpookyText(madnessTrickyLinesMiss);
	}

	function onSongStart(e)
	{
		super.onSongStart(e);
		if (staticSpr != null)
 			staticSpr.cameras = [PlayState.instance.camHUD];

	}

    function onUpdate(event:ScriptEvent) 
    {
		super.onUpdate(event);

        if (!allowWorking || PlayState.instance.isGamePaused)
            return;

		if (spookyRendered) 
        {
            if (spookyText != null && spookyText.angle != null)
			    spookyText.angle = FlxG.random.int(-5,5); 

			if (staticSpr.alpha != 0)
				staticSpr.alpha = FlxG.random.float(0.1,0.5);
		}

		if (spookyRendered && spookySteps + 3 < Conductor.instance.currentStep)
        {
			if (resetSpookyText)
            {
				if (spookyText != null && PlayState.instance.members.indexOf(spookyText) != -1)
					PlayState.instance.remove(spookyText);
				PlayState.instance.currentStage.refresh();
				spookyRendered = false;
			}
			staticSpr.alpha = 0;
		}
	}

	function createSpookyText(texts:Array<String>, setX:Float, setY:Float):Void {
		spookySteps = Conductor.instance.currentStep;
		spookyRendered = true;
		staticSpr.alpha = 0.5;
		FlxG.sound.play(Paths.sound('staticSound'));

        if (texts.length > 0)
        {
            var finalText = texts[FlxG.random.int(0, texts.length - 1)];
            var stage = PlayState.instance.currentStage;
            spookyText = new FlxText(setX != null ? setX : stage.getDad().x + FlxG.random.float(40, 120), setY != null ? setY : stage.getDad().y + FlxG.random.float(200, 300));
		    spookyText.setFormat(Paths.font("impact.ttf"), 128, 0xFFFF0000);
		    spookyText.bold = true;
		    spookyText.zIndex = 3502;
		    spookyText.text = finalText;
		    PlayState.instance.add(spookyText);
		    PlayState.instance.currentStage.refresh();
			resetSpookyText = true;
        }
	}
	
    override function onSongRetry(event) {
		if (!allowWorking)
			return;

		if (spookyText != null && PlayState.instance.members.indexOf(spookyText) != -1)
			PlayState.instance.remove(spookyText);	

		spookyRendered = false;
		staticSpr.alpha = 0;
    }

    function resetSpookyTextManual():Void
    {
		staticSpr.alpha = 0;
		spookyText.alpha = 0;
		resetSpookyText = true;
	}

    function getLines():Array<String>
    {
        switch (trickySongsArray.indexOf(PlayState.instance.currentChart.song.id))
        {
            case 0: ["SUFFER","INCORRECT", "INCOMPLETE", "INSUFFICIENT", "INVALID", "CORRECTION", "MISTAKE", "REDUCE", "ERROR", "ADJUSTING", "IMPROBABLE", "IMPLAUSIBLE", "MISJUDGED"];
            case 1: ["SUFFER","INCORRECT", "INCOMPLETE", "INSUFFICIENT", "INVALID", "CORRECTION", "MISTAKE", "REDUCE", "ERROR", "ADJUSTING", "IMPROBABLE", "IMPLAUSIBLE", "MISJUDGED"];
            case 2: [];
            case 3: ["YOU AREN'T HANK", "WHERE IS HANK", "HANK???", "WHO ARE YOU", "WHERE AM I", "THIS ISN'T RIGHT", "MIDGET", "SYSTEM UNRESPONSIVE", "WHY CAN'T I KILL?????"];
        }
    }
}